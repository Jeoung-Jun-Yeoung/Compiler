kim.l: In function ‘yylex’:
kim.l:82:12: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     yylval = strdup(yytext);
            ^
kim.l:89:12: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     yylval = strdup(yytext);
            ^
kim.l: In function ‘check_identifier’:
kim.l:110:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         yylval = strdup(s);
                ^
kim.l:114:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         yylval = id->type;
                ^
kim.l:118:16: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         yylval = id->name;
                ^
kim.y: In function ‘yyparse’:
kim.y:42:34: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : translation_unit {root=makeNode(N_PROGRAM,NIL,$1,NIL); checkForwardReference();}
                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:46:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | translation_unit external_declaration {$$=linkDeclaratorList($1,$2);}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:46:45: warning: passing argument 2 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | translation_unit external_declaration {$$=linkDeclaratorList($1,$2);}
                                             ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:46:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | translation_unit external_declaration {$$=linkDeclaratorList($1,$2);}
             ^
kim.y:53:45: warning: passing argument 1 of ‘setFunctionDeclaratorSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers declarator {$$=setFunctionDeclaratorSpecifier($2,$1);}
                                             ^
In file included from kim.y:18:0:
syntax.h:26:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setFunctionDeclaratorSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:53:56: warning: passing argument 2 of ‘setFunctionDeclaratorSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers declarator {$$=setFunctionDeclaratorSpecifier($2,$1);}
                                                        ^
In file included from kim.y:18:0:
syntax.h:26:7: note: expected ‘A_SPECIFIER * {aka struct <anonymous> *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setFunctionDeclaratorSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:53:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : declaration_specifiers declarator {$$=setFunctionDeclaratorSpecifier($2,$1);}
             ^
kim.y:54:40: warning: passing argument 1 of ‘setFunctionDeclaratorBody’ makes pointer from integer without a cast [-Wint-conversion]
         compound_statement {$$=setFunctionDeclaratorBody($3,$4);}
                                        ^
In file included from kim.y:18:0:
syntax.h:27:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setFunctionDeclaratorBody(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:54:52: warning: passing argument 2 of ‘setFunctionDeclaratorBody’ makes pointer from integer without a cast [-Wint-conversion]
         compound_statement {$$=setFunctionDeclaratorBody($3,$4);}
                                                    ^
In file included from kim.y:18:0:
syntax.h:27:7: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setFunctionDeclaratorBody(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:54:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         compound_statement {$$=setFunctionDeclaratorBody($3,$4);}
             ^
kim.y:55:45: warning: passing argument 1 of ‘setFunctionDeclaratorSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     | declarator {$$=setFunctionDeclaratorSpecifier($1,makeSpecifier(int_type,0));}
                                             ^
In file included from kim.y:18:0:
syntax.h:26:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setFunctionDeclaratorSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:55:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | declarator {$$=setFunctionDeclaratorSpecifier($1,makeSpecifier(int_type,0));}
             ^
kim.y:56:40: warning: passing argument 1 of ‘setFunctionDeclaratorBody’ makes pointer from integer without a cast [-Wint-conversion]
         compound_statement {$$=setFunctionDeclaratorBody($2,$3);}
                                        ^
In file included from kim.y:18:0:
syntax.h:27:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setFunctionDeclaratorBody(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:56:52: warning: passing argument 2 of ‘setFunctionDeclaratorBody’ makes pointer from integer without a cast [-Wint-conversion]
         compound_statement {$$=setFunctionDeclaratorBody($2,$3);}
                                                    ^
In file included from kim.y:18:0:
syntax.h:27:7: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setFunctionDeclaratorBody(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:56:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         compound_statement {$$=setFunctionDeclaratorBody($2,$3);}
             ^
kim.y:64:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | declaration_list declaration {$$=linkDeclaratorList($1,$2);}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:64:45: warning: passing argument 2 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | declaration_list declaration {$$=linkDeclaratorList($1,$2);}
                                             ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:64:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | declaration_list declaration {$$=linkDeclaratorList($1,$2);}
             ^
kim.y:67:41: warning: passing argument 1 of ‘setDeclaratorListSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers init_declarator_list_opt SEMICOLON {$$=setDeclaratorListSpecifier($2,$1);}
                                         ^
In file included from kim.y:18:0:
syntax.h:25:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorListSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:67:53: warning: passing argument 2 of ‘setDeclaratorListSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers init_declarator_list_opt SEMICOLON {$$=setDeclaratorListSpecifier($2,$1);}
                                                     ^
In file included from kim.y:18:0:
syntax.h:25:7: note: expected ‘A_SPECIFIER * {aka struct <anonymous> *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorListSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:67:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : declaration_specifiers init_declarator_list_opt SEMICOLON {$$=setDeclaratorListSpecifier($2,$1);}
             ^
kim.y:70:28: warning: passing argument 1 of ‘makeSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : type_specifier {$$=makeSpecifier($1,0);}
                            ^
In file included from kim.y:18:0:
syntax.h:11:14: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_SPECIFIER *makeSpecifier(A_TYPE *, S_KIND);
              ^~~~~~~~~~~~~
kim.y:70:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : type_specifier {$$=makeSpecifier($1,0);}
             ^
kim.y:71:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | storage_class_specifier {$$=makeSpecifier(0,$1);}
             ^
kim.y:72:30: warning: passing argument 1 of ‘updateSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     | type_specifier declaration_specifiers {$$=updateSpecifier($2,$1,0);}
                              ^
In file included from kim.y:18:0:
syntax.h:14:14: note: expected ‘A_SPECIFIER * {aka struct <anonymous> *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_SPECIFIER *updateSpecifier(A_SPECIFIER *, A_TYPE *, S_KIND);
              ^~~~~~~~~~~~~~~
kim.y:72:41: warning: passing argument 2 of ‘updateSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     | type_specifier declaration_specifiers {$$=updateSpecifier($2,$1,0);}
                                         ^
In file included from kim.y:18:0:
syntax.h:14:14: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_SPECIFIER *updateSpecifier(A_SPECIFIER *, A_TYPE *, S_KIND);
              ^~~~~~~~~~~~~~~
kim.y:72:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | type_specifier declaration_specifiers {$$=updateSpecifier($2,$1,0);}
             ^
kim.y:73:30: warning: passing argument 1 of ‘updateSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     | storage_class_specifier declaration_specifiers {$$=updateSpecifier($2,0,$1);}
                              ^
In file included from kim.y:18:0:
syntax.h:14:14: note: expected ‘A_SPECIFIER * {aka struct <anonymous> *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_SPECIFIER *updateSpecifier(A_SPECIFIER *, A_TYPE *, S_KIND);
              ^~~~~~~~~~~~~~~
kim.y:73:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | storage_class_specifier declaration_specifiers {$$=updateSpecifier($2,0,$1);}
             ^
kim.y:81:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     :     {$$=makeDummyIdentifier();}
             ^
kim.y:86:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | init_declarator_list COMMA init_declarator {$$=linkDeclaratorList($1,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:86:45: warning: passing argument 2 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | init_declarator_list COMMA init_declarator {$$=linkDeclaratorList($1,$3);}
                                             ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:86:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | init_declarator_list COMMA init_declarator {$$=linkDeclaratorList($1,$3);}
             ^
kim.y:90:32: warning: passing argument 1 of ‘setDeclaratorInit’ makes pointer from integer without a cast [-Wint-conversion]
     | declarator ASSIGN initializer {$$=setDeclaratorInit($1,$3);}
                                ^
In file included from kim.y:18:0:
syntax.h:20:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorInit(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~
kim.y:90:44: warning: passing argument 2 of ‘setDeclaratorInit’ makes pointer from integer without a cast [-Wint-conversion]
     | declarator ASSIGN initializer {$$=setDeclaratorInit($1,$3);}
                                            ^
In file included from kim.y:18:0:
syntax.h:20:7: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorInit(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~
kim.y:90:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | declarator ASSIGN initializer {$$=setDeclaratorInit($1,$3);}
             ^
kim.y:93:43: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : constant_expression {$$=makeNode(N_INIT_LIST_ONE,NIL,$1,NIL);}
                                           ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:93:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : constant_expression {$$=makeNode(N_INIT_LIST_ONE,NIL,$1,NIL);}
             ^
kim.y:97:35: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : initializer {$$=makeNode(N_INIT_LIST,$1,NIL,makeNode(N_INIT_LIST_NIL,NIL,NIL,NIL));}
                                   ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:97:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : initializer {$$=makeNode(N_INIT_LIST,$1,NIL,makeNode(N_INIT_LIST_NIL,NIL,NIL,NIL));}
             ^
kim.y:98:39: warning: passing argument 2 of ‘makeNodeList’ makes pointer from integer without a cast [-Wint-conversion]
     | initializer_list COMMA initializer {$$=makeNodeList(N_INIT_LIST,$1,$3);}
                                       ^
In file included from kim.y:18:0:
syntax.h:7:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNodeList(NODE_NAME, A_NODE *, A_NODE *);
         ^~~~~~~~~~~~
kim.y:98:51: warning: passing argument 3 of ‘makeNodeList’ makes pointer from integer without a cast [-Wint-conversion]
     | initializer_list COMMA initializer {$$=makeNodeList(N_INIT_LIST,$1,$3);}
                                                   ^
In file included from kim.y:18:0:
syntax.h:7:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNodeList(NODE_NAME, A_NODE *, A_NODE *);
         ^~~~~~~~~~~~
kim.y:98:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | initializer_list COMMA initializer {$$=makeNodeList(N_INIT_LIST,$1,$3);}
             ^
kim.y:106:56: warning: passing argument 2 of ‘setTypeStructOrEnumIdentifier’ makes pointer from integer without a cast [-Wint-conversion]
     : struct_or_union IDENTIFIER {$$=setTypeStructOrEnumIdentifier($1,$2,ID_STRUCT);}
                                                        ^
In file included from kim.y:18:0:
syntax.h:35:9: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeStructOrEnumIdentifier(T_KIND, char *, ID_KIND);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:106:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : struct_or_union IDENTIFIER {$$=setTypeStructOrEnumIdentifier($1,$2,ID_STRUCT);}
             ^
kim.y:107:14: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         LR { $$=current_id;current_level++;} struct_declaration_list RR
              ^
kim.y:108:51: warning: passing argument 1 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         {checkForwardReference();$$=setTypeField($3,$6);current_level--; current_id=$5;}
                                                   ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:108:63: warning: passing argument 2 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         {checkForwardReference();$$=setTypeField($3,$6);current_level--; current_id=$5;}
                                                               ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:108:37: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         {checkForwardReference();$$=setTypeField($3,$6);current_level--; current_id=$5;}
                                     ^
kim.y:108:103: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
         {checkForwardReference();$$=setTypeField($3,$6);current_level--; current_id=$5;}
                                                                                                       ^
kim.y:109:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | struct_or_union {$$=makeType($1);} LR {$$=current_id;current_level++;}
             ^
kim.y:109:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | struct_or_union {$$=makeType($1);} LR {$$=current_id;current_level++;}
             ^
kim.y:110:51: warning: passing argument 1 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         struct_declaration_list RR {checkForwardReference();$$=setTypeField($2,$5); current_level--;current_id=$4;}
                                                   ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:110:63: warning: passing argument 2 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         struct_declaration_list RR {checkForwardReference();$$=setTypeField($2,$5); current_level--;current_id=$4;}
                                                               ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:110:37: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         struct_declaration_list RR {checkForwardReference();$$=setTypeField($2,$5); current_level--;current_id=$4;}
                                     ^
kim.y:110:103: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
         struct_declaration_list RR {checkForwardReference();$$=setTypeField($2,$5); current_level--;current_id=$4;}
                                                                                                       ^
kim.y:111:61: warning: passing argument 2 of ‘getTypeOfStructOrEnumRefIdentifier’ makes pointer from integer without a cast [-Wint-conversion]
     | struct_or_union IDENTIFIER {$$=getTypeOfStructOrEnumRefIdentifier($1,$2,ID_STRUCT);}
                                                             ^
In file included from kim.y:18:0:
syntax.h:19:9: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *getTypeOfStructOrEnumRefIdentifier(T_KIND, char *, ID_KIND);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:111:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | struct_or_union IDENTIFIER {$$=getTypeOfStructOrEnumRefIdentifier($1,$2,ID_STRUCT);}
             ^
kim.y:119:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | struct_declaration_list struct_declaration {$$=linkDeclaratorList($1,$2);}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:119:45: warning: passing argument 2 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | struct_declaration_list struct_declaration {$$=linkDeclaratorList($1,$2);}
                                             ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:119:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | struct_declaration_list struct_declaration {$$=linkDeclaratorList($1,$2);}
             ^
kim.y:122:47: warning: passing argument 1 of ‘setStructDeclaratorListSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : type_specifier struct_declarator_list SEMICOLON {$$=setStructDeclaratorListSpecifier($2,$1);}
                                               ^
In file included from kim.y:18:0:
syntax.h:29:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setStructDeclaratorListSpecifier(A_ID *, A_TYPE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:122:59: warning: passing argument 2 of ‘setStructDeclaratorListSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : type_specifier struct_declarator_list SEMICOLON {$$=setStructDeclaratorListSpecifier($2,$1);}
                                                           ^
In file included from kim.y:18:0:
syntax.h:29:7: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setStructDeclaratorListSpecifier(A_ID *, A_TYPE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:122:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : type_specifier struct_declarator_list SEMICOLON {$$=setStructDeclaratorListSpecifier($2,$1);}
             ^
kim.y:126:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | struct_declarator_list COMMA struct_declarator {$$=linkDeclaratorList($1,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:126:45: warning: passing argument 2 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | struct_declarator_list COMMA struct_declarator {$$=linkDeclaratorList($1,$3);}
                                             ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:126:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | struct_declarator_list COMMA struct_declarator {$$=linkDeclaratorList($1,$3);}
             ^
kim.y:132:51: warning: passing argument 2 of ‘setTypeStructOrEnumIdentifier’ makes pointer from integer without a cast [-Wint-conversion]
     : ENUM_SYM IDENTIFIER {$$=setTypeStructOrEnumIdentifier(T_ENUM,$2,ID_ENUM);}
                                                   ^
In file included from kim.y:18:0:
syntax.h:35:9: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeStructOrEnumIdentifier(T_KIND, char *, ID_KIND);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:132:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : ENUM_SYM IDENTIFIER {$$=setTypeStructOrEnumIdentifier(T_ENUM,$2,ID_ENUM);}
             ^
kim.y:133:27: warning: passing argument 1 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         LR enumerator_list RR {$$=setTypeField($3,$5);}
                           ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:133:39: warning: passing argument 2 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         LR enumerator_list RR {$$=setTypeField($3,$5);}
                                       ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:133:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         LR enumerator_list RR {$$=setTypeField($3,$5);}
             ^
kim.y:134:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | ENUM_SYM {$$=makeType(T_ENUM);}
             ^
kim.y:135:27: warning: passing argument 1 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         LR enumerator_list RR {$$=setTypeField($2,$4);}
                           ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:135:39: warning: passing argument 2 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         LR enumerator_list RR {$$=setTypeField($2,$4);}
                                       ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:135:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         LR enumerator_list RR {$$=setTypeField($2,$4);}
             ^
kim.y:136:56: warning: passing argument 2 of ‘getTypeOfStructOrEnumRefIdentifier’ makes pointer from integer without a cast [-Wint-conversion]
     | ENUM_SYM IDENTIFIER {$$=getTypeOfStructOrEnumRefIdentifier(T_ENUM,$2,ID_ENUM);}
                                                        ^
In file included from kim.y:18:0:
syntax.h:19:9: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *getTypeOfStructOrEnumRefIdentifier(T_KIND, char *, ID_KIND);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:136:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | ENUM_SYM IDENTIFIER {$$=getTypeOfStructOrEnumRefIdentifier(T_ENUM,$2,ID_ENUM);}
             ^
kim.y:140:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | enumerator_list COMMA enumerator {$$=linkDeclaratorList($1,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:140:45: warning: passing argument 2 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | enumerator_list COMMA enumerator {$$=linkDeclaratorList($1,$3);}
                                             ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:140:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | enumerator_list COMMA enumerator {$$=linkDeclaratorList($1,$3);}
             ^
kim.y:143:47: warning: passing argument 1 of ‘makeIdentifier’ makes pointer from integer without a cast [-Wint-conversion]
     : IDENTIFIER {$$=setDeclaratorKind(makeIdentifier($1),ID_ENUM_LITERAL);}
                                               ^
In file included from kim.y:18:0:
syntax.h:8:7: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *makeIdentifier(char *);
       ^~~~~~~~~~~~~~
kim.y:143:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : IDENTIFIER {$$=setDeclaratorKind(makeIdentifier($1),ID_ENUM_LITERAL);}
             ^
kim.y:144:47: warning: passing argument 1 of ‘makeIdentifier’ makes pointer from integer without a cast [-Wint-conversion]
     | IDENTIFIER {$$=setDeclaratorKind(makeIdentifier($1),ID_ENUM_LITERAL);}
                                               ^
In file included from kim.y:18:0:
syntax.h:8:7: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *makeIdentifier(char *);
       ^~~~~~~~~~~~~~
kim.y:144:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | IDENTIFIER {$$=setDeclaratorKind(makeIdentifier($1),ID_ENUM_LITERAL);}
             ^
kim.y:145:32: warning: passing argument 1 of ‘setDeclaratorInit’ makes pointer from integer without a cast [-Wint-conversion]
         ASSIGN expression {$$=setDeclaratorInit($2,$4);}
                                ^
In file included from kim.y:18:0:
syntax.h:20:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorInit(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~
kim.y:145:44: warning: passing argument 2 of ‘setDeclaratorInit’ makes pointer from integer without a cast [-Wint-conversion]
         ASSIGN expression {$$=setDeclaratorInit($2,$4);}
                                            ^
In file included from kim.y:18:0:
syntax.h:20:7: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorInit(A_ID *, A_NODE *);
       ^~~~~~~~~~~~~~~~~
kim.y:145:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         ASSIGN expression {$$=setDeclaratorInit($2,$4);}
             ^
kim.y:148:39: warning: passing argument 1 of ‘setDeclaratorElementType’ makes pointer from integer without a cast [-Wint-conversion]
     : pointer direct_declarator {$$=setDeclaratorElementType($2,$1);}
                                       ^
In file included from kim.y:18:0:
syntax.h:23:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorElementType(A_ID *, A_TYPE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~
kim.y:148:50: warning: passing argument 2 of ‘setDeclaratorElementType’ makes pointer from integer without a cast [-Wint-conversion]
     : pointer direct_declarator {$$=setDeclaratorElementType($2,$1);}
                                                  ^
In file included from kim.y:18:0:
syntax.h:23:7: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorElementType(A_ID *, A_TYPE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~
kim.y:148:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : pointer direct_declarator {$$=setDeclaratorElementType($2,$1);}
             ^
kim.y:152:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : STAR {$$=makeType(T_POINTER);}
             ^
kim.y:153:33: warning: passing argument 1 of ‘setTypeElementType’ makes pointer from integer without a cast [-Wint-conversion]
     | STAR pointer {$$=setTypeElementType($2,makeType(T_POINTER));}
                                 ^
In file included from kim.y:18:0:
syntax.h:31:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeElementType(A_TYPE *, A_TYPE *);
         ^~~~~~~~~~~~~~~~~~
kim.y:153:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | STAR pointer {$$=setTypeElementType($2,makeType(T_POINTER));}
             ^
kim.y:156:29: warning: passing argument 1 of ‘makeIdentifier’ makes pointer from integer without a cast [-Wint-conversion]
     : IDENTIFIER {$$=makeIdentifier($1);}
                             ^
In file included from kim.y:18:0:
syntax.h:8:7: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *makeIdentifier(char *);
       ^~~~~~~~~~~~~~
kim.y:156:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : IDENTIFIER {$$=makeIdentifier($1);}
             ^
kim.y:159:81: warning: passing argument 2 of ‘setTypeExpr’ makes pointer from integer without a cast [-Wint-conversion]
         RB {$$=setDeclaratorElementType($1,setTypeExpr(makeType(T_ARRAY),$3));}
                                                                                 ^
In file included from kim.y:18:0:
syntax.h:33:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeExpr(A_TYPE *, A_NODE *);
         ^~~~~~~~~~~
kim.y:159:39: warning: passing argument 1 of ‘setDeclaratorElementType’ makes pointer from integer without a cast [-Wint-conversion]
         RB {$$=setDeclaratorElementType($1,setTypeExpr(makeType(T_ARRAY),$3));}
                                       ^
In file included from kim.y:18:0:
syntax.h:23:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorElementType(A_ID *, A_TYPE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~
kim.y:159:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         RB {$$=setDeclaratorElementType($1,setTypeExpr(makeType(T_ARRAY),$3));}
             ^
kim.y:160:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | direct_declarator LP {$$=current_id;current_level++;}
             ^
kim.y:162:40: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
         RP {checkForwardReference();current_id=$3;current_level--; $$=setDeclaratorElementType($1,setTypeField(makeType(T_FUNC),$4));}
                                        ^
kim.y:162:145: warning: passing argument 2 of ‘setTypeField’ makes pointer from integer without a cast [-Wint-conversion]
         RP {checkForwardReference();current_id=$3;current_level--; $$=setDeclaratorElementType($1,setTypeField(makeType(T_FUNC),$4));}
                                                                                                                                                 ^
In file included from kim.y:18:0:
syntax.h:32:9: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeField(A_TYPE *, A_ID *);
         ^~~~~~~~~~~~
kim.y:162:103: warning: passing argument 1 of ‘setDeclaratorElementType’ makes pointer from integer without a cast [-Wint-conversion]
         RP {checkForwardReference();current_id=$3;current_level--; $$=setDeclaratorElementType($1,setTypeField(makeType(T_FUNC),$4));}
                                                                                                       ^
In file included from kim.y:18:0:
syntax.h:23:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorElementType(A_ID *, A_TYPE *);
       ^~~~~~~~~~~~~~~~~~~~~~~~
kim.y:162:77: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         RP {checkForwardReference();current_id=$3;current_level--; $$=setDeclaratorElementType($1,setTypeField(makeType(T_FUNC),$4));}
                                                                             ^
kim.y:170:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | parameter_list COMMA DOTDOTDOT {$$=linkDeclaratorList($1,setDeclaratorKind(makeDummyIdentifier(),ID_PARM));}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:170:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | parameter_list COMMA DOTDOTDOT {$$=linkDeclaratorList($1,setDeclaratorKind(makeDummyIdentifier(),ID_PARM));}
             ^
kim.y:174:33: warning: passing argument 1 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | parameter_list COMMA parameter_declaration {$$=linkDeclaratorList($1,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:174:45: warning: passing argument 2 of ‘linkDeclaratorList’ makes pointer from integer without a cast [-Wint-conversion]
     | parameter_list COMMA parameter_declaration {$$=linkDeclaratorList($1,$3);}
                                             ^
In file included from kim.y:18:0:
syntax.h:17:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *linkDeclaratorList(A_ID *, A_ID *);
       ^~~~~~~~~~~~~~~~~~
kim.y:174:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | parameter_list COMMA parameter_declaration {$$=linkDeclaratorList($1,$3);}
             ^
kim.y:177:46: warning: passing argument 1 of ‘setParameterDeclaratorSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers declarator {$$=setParameterDeclaratorSpecifier($2,$1);}
                                              ^
In file included from kim.y:18:0:
syntax.h:28:7: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setParameterDeclaratorSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:177:57: warning: passing argument 2 of ‘setParameterDeclaratorSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers declarator {$$=setParameterDeclaratorSpecifier($2,$1);}
                                                         ^
In file included from kim.y:18:0:
syntax.h:28:7: note: expected ‘A_SPECIFIER * {aka struct <anonymous> *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setParameterDeclaratorSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:177:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : declaration_specifiers declarator {$$=setParameterDeclaratorSpecifier($2,$1);}
             ^
kim.y:178:86: warning: passing argument 2 of ‘setDeclaratorType’ makes pointer from integer without a cast [-Wint-conversion]
     | declaration_specifiers abstract_declarator_opt {$$=setParameterDeclaratorSpecifier(setDeclaratorType(makeDummyIdentifier(),$2),$1);}
                                                                                      ^
In file included from kim.y:18:0:
syntax.h:22:7: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setDeclaratorType(A_ID *, A_TYPE *);
       ^~~~~~~~~~~~~~~~~
kim.y:178:98: warning: passing argument 2 of ‘setParameterDeclaratorSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     | declaration_specifiers abstract_declarator_opt {$$=setParameterDeclaratorSpecifier(setDeclaratorType(makeDummyIdentifier(),$2),$1);}
                                                                                                  ^
In file included from kim.y:18:0:
syntax.h:28:7: note: expected ‘A_SPECIFIER * {aka struct <anonymous> *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *setParameterDeclaratorSpecifier(A_ID *, A_SPECIFIER *);
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kim.y:178:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | declaration_specifiers abstract_declarator_opt {$$=setParameterDeclaratorSpecifier(setDeclaratorType(makeDummyIdentifier(),$2),$1);}
             ^
kim.y:186:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | pointer {$$=makeType(T_POINTER);}
             ^
kim.y:187:33: warning: passing argument 1 of ‘setTypeElementType’ makes pointer from integer without a cast [-Wint-conversion]
     | pointer direct_abstract_declarator {$$=setTypeElementType($2,makeType(T_POINTER));}
                                 ^
In file included from kim.y:18:0:
syntax.h:31:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeElementType(A_TYPE *, A_TYPE *);
         ^~~~~~~~~~~~~~~~~~
kim.y:187:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | pointer direct_abstract_declarator {$$=setTypeElementType($2,makeType(T_POINTER));}
             ^
kim.y:191:44: warning: passing argument 2 of ‘setTypeExpr’ makes pointer from integer without a cast [-Wint-conversion]
     | LB constant_expression_opt RB {$$=setTypeExpr(makeType(T_ARRAY),$2);}
                                            ^
In file included from kim.y:18:0:
syntax.h:33:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeExpr(A_TYPE *, A_NODE *);
         ^~~~~~~~~~~
kim.y:191:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | LB constant_expression_opt RB {$$=setTypeExpr(makeType(T_ARRAY),$2);}
             ^
kim.y:192:75: warning: passing argument 2 of ‘setTypeExpr’ makes pointer from integer without a cast [-Wint-conversion]
     | direct_abstract_declarator LB constant_expression_opt RB {$$=setTypeElementType($1,setTypeExpr(makeType(T_ARRAY),$3));}
                                                                           ^
In file included from kim.y:18:0:
syntax.h:33:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeExpr(A_TYPE *, A_NODE *);
         ^~~~~~~~~~~
kim.y:192:33: warning: passing argument 1 of ‘setTypeElementType’ makes pointer from integer without a cast [-Wint-conversion]
     | direct_abstract_declarator LB constant_expression_opt RB {$$=setTypeElementType($1,setTypeExpr(makeType(T_ARRAY),$3));}
                                 ^
In file included from kim.y:18:0:
syntax.h:31:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeElementType(A_TYPE *, A_TYPE *);
         ^~~~~~~~~~~~~~~~~~
kim.y:192:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | direct_abstract_declarator LB constant_expression_opt RB {$$=setTypeElementType($1,setTypeExpr(makeType(T_ARRAY),$3));}
             ^
kim.y:193:43: warning: passing argument 2 of ‘setTypeExpr’ makes pointer from integer without a cast [-Wint-conversion]
     | LP parameter_type_list_opt RP {$$=setTypeExpr(makeType(T_FUNC),$2);}
                                           ^
In file included from kim.y:18:0:
syntax.h:33:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeExpr(A_TYPE *, A_NODE *);
         ^~~~~~~~~~~
kim.y:193:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | LP parameter_type_list_opt RP {$$=setTypeExpr(makeType(T_FUNC),$2);}
             ^
kim.y:194:74: warning: passing argument 2 of ‘setTypeExpr’ makes pointer from integer without a cast [-Wint-conversion]
     | direct_abstract_declarator LP parameter_type_list_opt RP {$$=setTypeElementType($1,setTypeExpr(makeType(T_FUNC),$3));}
                                                                          ^
In file included from kim.y:18:0:
syntax.h:33:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeExpr(A_TYPE *, A_NODE *);
         ^~~~~~~~~~~
kim.y:194:33: warning: passing argument 1 of ‘setTypeElementType’ makes pointer from integer without a cast [-Wint-conversion]
     | direct_abstract_declarator LP parameter_type_list_opt RP {$$=setTypeElementType($1,setTypeExpr(makeType(T_FUNC),$3));}
                                 ^
In file included from kim.y:18:0:
syntax.h:31:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeElementType(A_TYPE *, A_TYPE *);
         ^~~~~~~~~~~~~~~~~~
kim.y:194:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | direct_abstract_declarator LP parameter_type_list_opt RP {$$=setTypeElementType($1,setTypeExpr(makeType(T_FUNC),$3));}
             ^
kim.y:197:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : {$$=makeNode(N_STMT_LIST_NIL,NIL,NIL,NIL);}
             ^
kim.y:201:35: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : statement {$$=makeNode(N_STMT_LIST,$1,NIL,makeNode(N_STMT_LIST_NIL,NIL,NIL,NIL));}
                                   ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:201:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : statement {$$=makeNode(N_STMT_LIST,$1,NIL,makeNode(N_STMT_LIST_NIL,NIL,NIL,NIL));}
             ^
kim.y:202:39: warning: passing argument 2 of ‘makeNodeList’ makes pointer from integer without a cast [-Wint-conversion]
     | statement_list statement {$$=makeNodeList(N_STMT_LIST,$1,$2);}
                                       ^
In file included from kim.y:18:0:
syntax.h:7:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNodeList(NODE_NAME, A_NODE *, A_NODE *);
         ^~~~~~~~~~~~
kim.y:202:51: warning: passing argument 3 of ‘makeNodeList’ makes pointer from integer without a cast [-Wint-conversion]
     | statement_list statement {$$=makeNodeList(N_STMT_LIST,$1,$2);}
                                                   ^
In file included from kim.y:18:0:
syntax.h:7:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNodeList(NODE_NAME, A_NODE *, A_NODE *);
         ^~~~~~~~~~~~
kim.y:202:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | statement_list statement {$$=makeNodeList(N_STMT_LIST,$1,$2);}
             ^
kim.y:213:42: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : CASE_SYM constant_expression COLON statement {$$=makeNode(N_STMT_LABEL_CASE, $2,NIL,$4);}
                                          ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:213:58: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : CASE_SYM constant_expression COLON statement {$$=makeNode(N_STMT_LABEL_CASE, $2,NIL,$4);}
                                                          ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:213:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : CASE_SYM constant_expression COLON statement {$$=makeNode(N_STMT_LABEL_CASE, $2,NIL,$4);}
             ^
kim.y:214:48: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | DEFAULT_SYM COLON statement {$$=makeNode(N_STMT_LABEL_DEFAULT,NIL,$3,NIL);}
                                                ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:214:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | DEFAULT_SYM COLON statement {$$=makeNode(N_STMT_LABEL_DEFAULT,NIL,$3,NIL);}
             ^
kim.y:217:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : LR {$$=current_id;current_level++;}
             ^
kim.y:219:64: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
         {checkForwardReference(); $$=makeNode(N_STMT_COMPOUND,$3,NIL,$4); current_id=$2; current_level--;}
                                                                ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:219:80: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
         {checkForwardReference(); $$=makeNode(N_STMT_COMPOUND,$3,NIL,$4); current_id=$2; current_level--;}
                                                                                ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:219:38: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
         {checkForwardReference(); $$=makeNode(N_STMT_COMPOUND,$3,NIL,$4); current_id=$2; current_level--;}
                                      ^
kim.y:219:104: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
         {checkForwardReference(); $$=makeNode(N_STMT_COMPOUND,$3,NIL,$4); current_id=$2; current_level--;}
                                                                                                        ^
kim.y:222:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : SEMICOLON {$$=makeNode(N_STMT_EMPTY,NIL,NIL,NIL);}
             ^
kim.y:223:45: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | expression SEMICOLON {$$=makeNode(N_STMT_EXPRESSION,NIL,$1,NIL);}
                                             ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:223:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | expression SEMICOLON {$$=makeNode(N_STMT_EXPRESSION,NIL,$1,NIL);}
             ^
kim.y:226:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : IF_SYM LP expression RP statement {$$=makeNode(N_STMT_IF,$3,NIL,$5);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:226:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : IF_SYM LP expression RP statement {$$=makeNode(N_STMT_IF,$3,NIL,$5);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:226:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : IF_SYM LP expression RP statement {$$=makeNode(N_STMT_IF,$3,NIL,$5);}
             ^
kim.y:227:38: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | IF_SYM LP expression RP statement ELSE_SYM statement {$$=makeNode(N_STMT_IF_ELSE,$3,$5,$7);}
                                      ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:227:50: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | IF_SYM LP expression RP statement ELSE_SYM statement {$$=makeNode(N_STMT_IF_ELSE,$3,$5,$7);}
                                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:227:62: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | IF_SYM LP expression RP statement ELSE_SYM statement {$$=makeNode(N_STMT_IF_ELSE,$3,$5,$7);}
                                                              ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:227:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | IF_SYM LP expression RP statement ELSE_SYM statement {$$=makeNode(N_STMT_IF_ELSE,$3,$5,$7);}
             ^
kim.y:228:37: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | SWITCH_SYM LP expression RP statement {$$=makeNode(N_STMT_SWITCH,$3,NIL,$5);}
                                     ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:228:53: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | SWITCH_SYM LP expression RP statement {$$=makeNode(N_STMT_SWITCH,$3,NIL,$5);}
                                                     ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:228:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | SWITCH_SYM LP expression RP statement {$$=makeNode(N_STMT_SWITCH,$3,NIL,$5);}
             ^
kim.y:231:36: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : WHILE_SYM LP expression RP statement {$$=makeNode(N_STMT_WHILE,$3,NIL,$5);}
                                    ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:231:52: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : WHILE_SYM LP expression RP statement {$$=makeNode(N_STMT_WHILE,$3,NIL,$5);}
                                                    ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:231:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : WHILE_SYM LP expression RP statement {$$=makeNode(N_STMT_WHILE,$3,NIL,$5);}
             ^
kim.y:232:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | DO_SYM statement WHILE_SYM LP expression RP SEMICOLON {$$=makeNode(N_STMT_DO,$2,NIL,$5);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:232:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | DO_SYM statement WHILE_SYM LP expression RP SEMICOLON {$$=makeNode(N_STMT_DO,$2,NIL,$5);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:232:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | DO_SYM statement WHILE_SYM LP expression RP SEMICOLON {$$=makeNode(N_STMT_DO,$2,NIL,$5);}
             ^
kim.y:233:34: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | FOR_SYM LP for_expression RP statement {$$=makeNode(N_STMT_FOR,$3,NIL,$5);}
                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:233:50: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | FOR_SYM LP for_expression RP statement {$$=makeNode(N_STMT_FOR,$3,NIL,$5);}
                                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:233:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | FOR_SYM LP for_expression RP statement {$$=makeNode(N_STMT_FOR,$3,NIL,$5);}
             ^
kim.y:236:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : expression_opt SEMICOLON expression_opt SEMICOLON expression_opt {$$=makeNode(N_FOR_EXP,$1,$3,$5);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:236:45: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : expression_opt SEMICOLON expression_opt SEMICOLON expression_opt {$$=makeNode(N_FOR_EXP,$1,$3,$5);}
                                             ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:236:57: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : expression_opt SEMICOLON expression_opt SEMICOLON expression_opt {$$=makeNode(N_FOR_EXP,$1,$3,$5);}
                                                         ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:236:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : expression_opt SEMICOLON expression_opt SEMICOLON expression_opt {$$=makeNode(N_FOR_EXP,$1,$3,$5);}
             ^
kim.y:243:41: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : RETURN_SYM expression_opt SEMICOLON {$$=makeNode(N_STMT_RETURN,NIL,$2,NIL);}
                                         ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:243:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : RETURN_SYM expression_opt SEMICOLON {$$=makeNode(N_STMT_RETURN,NIL,$2,NIL);}
             ^
kim.y:244:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | CONTINUE_SYM SEMICOLON {$$=makeNode(N_STMT_CONTINUE,NIL,NIL,NIL);}
             ^
kim.y:245:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | BREAK_SYM SEMICOLON {$$=makeNode(N_STMT_BREAK,NIL,NIL,NIL);}
             ^
kim.y:248:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : {$$=makeNode(N_ARG_LIST_NIL,NIL,NIL,NIL);}
             ^
kim.y:252:34: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     : assignment_expression {$$=makeNode(N_ARG_LIST,$1,NIL,makeNode(N_ARG_LIST_NIL,NIL,NIL,NIL));}
                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:252:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : assignment_expression {$$=makeNode(N_ARG_LIST,$1,NIL,makeNode(N_ARG_LIST_NIL,NIL,NIL,NIL));}
             ^
kim.y:253:38: warning: passing argument 2 of ‘makeNodeList’ makes pointer from integer without a cast [-Wint-conversion]
     | arg_expression_list COMMA assignment_expression {$$=makeNodeList(N_ARG_LIST,$1,$3);}
                                      ^
In file included from kim.y:18:0:
syntax.h:7:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNodeList(NODE_NAME, A_NODE *, A_NODE *);
         ^~~~~~~~~~~~
kim.y:253:50: warning: passing argument 3 of ‘makeNodeList’ makes pointer from integer without a cast [-Wint-conversion]
     | arg_expression_list COMMA assignment_expression {$$=makeNodeList(N_ARG_LIST,$1,$3);}
                                                  ^
In file included from kim.y:18:0:
syntax.h:7:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNodeList(NODE_NAME, A_NODE *, A_NODE *);
         ^~~~~~~~~~~~
kim.y:253:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | arg_expression_list COMMA assignment_expression {$$=makeNodeList(N_ARG_LIST,$1,$3);}
             ^
kim.y:270:36: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | unary_expression ASSIGN assignment_expression {$$=makeNode(N_EXP_ASSIGN,$1,NIL,$3);}
                                    ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:270:52: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | unary_expression ASSIGN assignment_expression {$$=makeNode(N_EXP_ASSIGN,$1,NIL,$3);}
                                                    ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:270:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | unary_expression ASSIGN assignment_expression {$$=makeNode(N_EXP_ASSIGN,$1,NIL,$3);}
             ^
kim.y:277:32: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | logical_or_expression BARBAR logical_and_expression {$$=makeNode(N_EXP_OR,$1,NIL,$3);}
                                ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:277:48: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | logical_or_expression BARBAR logical_and_expression {$$=makeNode(N_EXP_OR,$1,NIL,$3);}
                                                ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:277:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | logical_or_expression BARBAR logical_and_expression {$$=makeNode(N_EXP_OR,$1,NIL,$3);}
             ^
kim.y:281:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | logical_and_expression AMPAMP bitwise_or_expression {$$=makeNode(N_EXP_AND,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:281:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | logical_and_expression AMPAMP bitwise_or_expression {$$=makeNode(N_EXP_AND,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:281:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | logical_and_expression AMPAMP bitwise_or_expression {$$=makeNode(N_EXP_AND,$1,NIL,$3);}
             ^
kim.y:294:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | equality_expression EQL relational_expression {$$=makeNode(N_EXP_EQL,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:294:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | equality_expression EQL relational_expression {$$=makeNode(N_EXP_EQL,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:294:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | equality_expression EQL relational_expression {$$=makeNode(N_EXP_EQL,$1,NIL,$3);}
             ^
kim.y:295:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | equality_expression NEQ relational_expression {$$=makeNode(N_EXP_NEQ,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:295:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | equality_expression NEQ relational_expression {$$=makeNode(N_EXP_NEQ,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:295:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | equality_expression NEQ relational_expression {$$=makeNode(N_EXP_NEQ,$1,NIL,$3);}
             ^
kim.y:299:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression LSS shift_expression {$$=makeNode(N_EXP_LSS,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:299:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression LSS shift_expression {$$=makeNode(N_EXP_LSS,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:299:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | relational_expression LSS shift_expression {$$=makeNode(N_EXP_LSS,$1,NIL,$3);}
             ^
kim.y:300:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression GTR shift_expression {$$=makeNode(N_EXP_GTR,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:300:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression GTR shift_expression {$$=makeNode(N_EXP_GTR,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:300:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | relational_expression GTR shift_expression {$$=makeNode(N_EXP_GTR,$1,NIL,$3);}
             ^
kim.y:301:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression LEQ shift_expression {$$=makeNode(N_EXP_LEQ,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:301:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression LEQ shift_expression {$$=makeNode(N_EXP_LEQ,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:301:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | relational_expression LEQ shift_expression {$$=makeNode(N_EXP_LEQ,$1,NIL,$3);}
             ^
kim.y:302:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression GEQ shift_expression {$$=makeNode(N_EXP_GEQ,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:302:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | relational_expression GEQ shift_expression {$$=makeNode(N_EXP_GEQ,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:302:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | relational_expression GEQ shift_expression {$$=makeNode(N_EXP_GEQ,$1,NIL,$3);}
             ^
kim.y:309:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | additive_expression PLUS multiplicative_expression {$$=makeNode(N_EXP_ADD,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:309:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | additive_expression PLUS multiplicative_expression {$$=makeNode(N_EXP_ADD,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:309:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | additive_expression PLUS multiplicative_expression {$$=makeNode(N_EXP_ADD,$1,NIL,$3);}
             ^
kim.y:310:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | additive_expression MINUS multiplicative_expression {$$=makeNode(N_EXP_SUB,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:310:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | additive_expression MINUS multiplicative_expression {$$=makeNode(N_EXP_SUB,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:310:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | additive_expression MINUS multiplicative_expression {$$=makeNode(N_EXP_SUB,$1,NIL,$3);}
             ^
kim.y:314:33: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | multiplicative_expression STAR cast_expression {$$=makeNode(N_EXP_MUL,$1,NIL,$3);}
                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:314:49: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | multiplicative_expression STAR cast_expression {$$=makeNode(N_EXP_MUL,$1,NIL,$3);}
                                                 ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:314:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | multiplicative_expression STAR cast_expression {$$=makeNode(N_EXP_MUL,$1,NIL,$3);}
             ^
kim.y:315:34: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | multiplicative_expression SLASH cast_expression {$$= makeNode(N_EXP_DIV,$1,NIL,$3);}
                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:315:50: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | multiplicative_expression SLASH cast_expression {$$= makeNode(N_EXP_DIV,$1,NIL,$3);}
                                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:315:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | multiplicative_expression SLASH cast_expression {$$= makeNode(N_EXP_DIV,$1,NIL,$3);}
             ^
kim.y:316:34: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | multiplicative_expression PERCENT cast_expression {$$= makeNode(N_EXP_MOD,$1,NIL,$3);}
                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:316:50: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | multiplicative_expression PERCENT cast_expression {$$= makeNode(N_EXP_MOD,$1,NIL,$3);}
                                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:316:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | multiplicative_expression PERCENT cast_expression {$$= makeNode(N_EXP_MOD,$1,NIL,$3);}
             ^
kim.y:320:34: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | LP type_name RP cast_expression {$$=makeNode(N_EXP_CAST,$2,NIL,$4);}
                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:320:50: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | LP type_name RP cast_expression {$$=makeNode(N_EXP_CAST,$2,NIL,$4);}
                                                  ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:320:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | LP type_name RP cast_expression {$$=makeNode(N_EXP_CAST,$2,NIL,$4);}
             ^
kim.y:324:41: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | PLUSPLUS unary_expression {$$=makeNode(N_EXP_PRE_INC,NIL,$2,NIL);}
                                         ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:324:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | PLUSPLUS unary_expression {$$=makeNode(N_EXP_PRE_INC,NIL,$2,NIL);}
             ^
kim.y:325:41: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | MINUSMINUS unary_expression {$$=makeNode(N_EXP_PRE_DEC,NIL,$2,NIL);}
                                         ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:325:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | MINUSMINUS unary_expression {$$=makeNode(N_EXP_PRE_DEC,NIL,$2,NIL);}
             ^
kim.y:326:37: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | AMP cast_expression {$$=makeNode(N_EXP_AMP,NIL,$2,NIL);}
                                     ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:326:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | AMP cast_expression {$$=makeNode(N_EXP_AMP,NIL,$2,NIL);}
             ^
kim.y:327:38: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | STAR cast_expression {$$=makeNode(N_EXP_STAR,NIL,$2,NIL);}
                                      ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:327:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | STAR cast_expression {$$=makeNode(N_EXP_STAR,NIL,$2,NIL);}
             ^
kim.y:328:37: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | EXCL cast_expression {$$=makeNode(N_EXP_NOT,NIL,$2,NIL);}
                                     ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:328:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | EXCL cast_expression {$$=makeNode(N_EXP_NOT,NIL,$2,NIL);}
             ^
kim.y:329:39: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | MINUS cast_expression {$$=makeNode(N_EXP_MINUS,NIL,$2,NIL);}
                                       ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:329:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | MINUS cast_expression {$$=makeNode(N_EXP_MINUS,NIL,$2,NIL);}
             ^
kim.y:330:38: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | PLUS cast_expression {$$=makeNode(N_EXP_PLUS,NIL,$2,NIL);}
                                      ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:330:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | PLUS cast_expression {$$=makeNode(N_EXP_PLUS,NIL,$2,NIL);}
             ^
kim.y:331:42: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | SIZEOF_SYM unary_expression {$$=makeNode(N_EXP_SIZE_EXP,NIL,$2,NIL);}
                                          ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:331:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | SIZEOF_SYM unary_expression {$$=makeNode(N_EXP_SIZE_EXP,NIL,$2,NIL);}
             ^
kim.y:332:43: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | SIZEOF_SYM LP type_name RP {$$=makeNode(N_EXP_SIZE_TYPE,NIL,$3,NIL);}
                                           ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:332:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | SIZEOF_SYM LP type_name RP {$$=makeNode(N_EXP_SIZE_TYPE,NIL,$3,NIL);}
             ^
kim.y:336:35: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression LB expression RB {$$=makeNode(N_EXP_ARRAY,$1,NIL,$3);}
                                   ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:336:51: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression LB expression RB {$$=makeNode(N_EXP_ARRAY,$1,NIL,$3);}
                                                   ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:336:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | postfix_expression LB expression RB {$$=makeNode(N_EXP_ARRAY,$1,NIL,$3);}
             ^
kim.y:337:43: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression LP arg_expression_list_opt RP {$$=makeNode(N_EXP_FUNCTION_CALL,$1,NIL,$3);}
                                           ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:337:59: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression LP arg_expression_list_opt RP {$$=makeNode(N_EXP_FUNCTION_CALL,$1,NIL,$3);}
                                                           ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:337:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | postfix_expression LP arg_expression_list_opt RP {$$=makeNode(N_EXP_FUNCTION_CALL,$1,NIL,$3);}
             ^
kim.y:338:36: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression PERIOD IDENTIFIER {$$=makeNode(N_EXP_STRUCT,$1,NIL,$3);}
                                    ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:338:52: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression PERIOD IDENTIFIER {$$=makeNode(N_EXP_STRUCT,$1,NIL,$3);}
                                                    ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:338:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | postfix_expression PERIOD IDENTIFIER {$$=makeNode(N_EXP_STRUCT,$1,NIL,$3);}
             ^
kim.y:339:35: warning: passing argument 2 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression ARROW IDENTIFIER {$$=makeNode(N_EXP_ARROW,$1,NIL,$3);}
                                   ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:339:51: warning: passing argument 4 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression ARROW IDENTIFIER {$$=makeNode(N_EXP_ARROW,$1,NIL,$3);}
                                                   ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:339:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | postfix_expression ARROW IDENTIFIER {$$=makeNode(N_EXP_ARROW,$1,NIL,$3);}
             ^
kim.y:340:42: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression PLUSPLUS {$$=makeNode(N_EXP_POST_INC,NIL,$1,NIL);}
                                          ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:340:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | postfix_expression PLUSPLUS {$$=makeNode(N_EXP_POST_INC,NIL,$1,NIL);}
             ^
kim.y:341:42: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | postfix_expression MINUSMINUS {$$=makeNode(N_EXP_POST_DEC,NIL,$1,NIL);}
                                          ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:341:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | postfix_expression MINUSMINUS {$$=makeNode(N_EXP_POST_DEC,NIL,$1,NIL);}
             ^
kim.y:344:61: warning: passing argument 1 of ‘getIdentifierDeclared’ makes pointer from integer without a cast [-Wint-conversion]
     : IDENTIFIER {$$=makeNode(N_EXP_IDENT,NIL,getIdentifierDeclared($1),NIL);}
                                                             ^
In file included from kim.y:18:0:
syntax.h:18:7: note: expected ‘char *’ but argument is of type ‘YYSTYPE {aka long int}’
 A_ID *getIdentifierDeclared(char *);
       ^~~~~~~~~~~~~~~~~~~~~
kim.y:344:39: warning: passing argument 3 of ‘makeNode’ from incompatible pointer type [-Wincompatible-pointer-types]
     : IDENTIFIER {$$=makeNode(N_EXP_IDENT,NIL,getIdentifierDeclared($1),NIL);}
                                       ^~~~~~~~~~~~~~~~~~~~~
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘A_ID * {aka struct s_id *}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:344:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : IDENTIFIER {$$=makeNode(N_EXP_IDENT,NIL,getIdentifierDeclared($1),NIL);}
             ^
kim.y:345:43: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | INTEGER_CONSTANT {$$=makeNode(N_EXP_INT_CONST,NIL,$1,NIL);}
                                           ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:345:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | INTEGER_CONSTANT {$$=makeNode(N_EXP_INT_CONST,NIL,$1,NIL);}
             ^
kim.y:346:45: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | FLOAT_CONSTANT {$$=makeNode(N_EXP_FLOAT_CONST,NIL,$1,NIL);}
                                             ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:346:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | FLOAT_CONSTANT {$$=makeNode(N_EXP_FLOAT_CONST,NIL,$1,NIL);}
             ^
kim.y:347:44: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | CHARACTER_CONSTANT {$$=makeNode(N_EXP_CHAR_CONST,NIL,$1,NIL);}
                                            ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:347:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | CHARACTER_CONSTANT {$$=makeNode(N_EXP_CHAR_CONST,NIL,$1,NIL);}
             ^
kim.y:348:48: warning: passing argument 3 of ‘makeNode’ makes pointer from integer without a cast [-Wint-conversion]
     | STRING_LITERAL {$$=makeNode(N_EXP_STRING_LITERAL,NIL,$1,NIL);}
                                                ^
In file included from kim.y:18:0:
syntax.h:6:9: note: expected ‘A_NODE * {aka struct s_node *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_NODE *makeNode(NODE_NAME, A_NODE *, A_NODE *, A_NODE *);
         ^~~~~~~~
kim.y:348:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     | STRING_LITERAL {$$=makeNode(N_EXP_STRING_LITERAL,NIL,$1,NIL);}
             ^
kim.y:352:35: warning: passing argument 1 of ‘setTypeNameSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers abstract_declarator_opt {$$=setTypeNameSpecifier($2,$1);}
                                   ^
In file included from kim.y:18:0:
syntax.h:30:9: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeNameSpecifier(A_TYPE *, A_SPECIFIER *);
         ^~~~~~~~~~~~~~~~~~~~
kim.y:352:46: warning: passing argument 2 of ‘setTypeNameSpecifier’ makes pointer from integer without a cast [-Wint-conversion]
     : declaration_specifiers abstract_declarator_opt {$$=setTypeNameSpecifier($2,$1);}
                                              ^
In file included from kim.y:18:0:
syntax.h:30:9: note: expected ‘A_SPECIFIER * {aka struct <anonymous> *}’ but argument is of type ‘YYSTYPE {aka long int}’
 A_TYPE *setTypeNameSpecifier(A_TYPE *, A_SPECIFIER *);
         ^~~~~~~~~~~~~~~~~~~~
kim.y:352:13: warning: assignment makes integer from pointer without a cast [-Wint-conversion]
     : declaration_specifiers abstract_declarator_opt {$$=setTypeNameSpecifier($2,$1);}
             ^
semantic.c: In function ‘sem_expression’:
semantic.c:101:23: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
         node->clink = (struct s_node *)put_literal(lit, node->line); // index of literal table
                       ^
semantic.c:110:23: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
         node->clink = (struct s_node *)put_literal(lit, node->line);
                       ^
semantic.c:120:13: warning: implicit declaration of function ‘isPointerOrArrayType’; did you mean ‘isPointerOrArrayType_sem’? [-Wimplicit-function-declaration]
         if (isPointerOrArrayType(t1))
             ^~~~~~~~~~~~~~~~~~~~
             isPointerOrArrayType_sem
semantic.c:198:27: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
             node->clink = (struct s_node *)i;
                           ^
semantic.c:209:27: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
             node->clink = (struct s_node *)t->size;
                           ^
semantic.c: In function ‘sem_statement’:
semantic.c:436:27: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
             node->llink = (struct s_node *)lit.value.i;
                           ^
semantic.c: In function ‘sem_A_TYPE’:
semantic.c:604:24: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
             id->init = (A_NODE *)i++;
                        ^
semantic.c:619:27: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
                 t->expr = (struct s_node *)lit.value.i;
                           ^
semantic.c:621:43: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
         i = sem_A_TYPE(t->element_type) * (int)t->expr;
                                           ^
semantic.c: In function ‘getTypeAndValueOfExpression’:
semantic.c:1127:30: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
             result.value.i = (int)id->init;
                              ^
semantic.c:1132:26: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
         result.value.i = (int)node->clink;
                          ^
semantic.c:1136:26: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
         result.value.c = (char)node->clink;
                          ^
semantic.c: In function ‘semantic_error’:
semantic.c:1360:45: warning: format ‘%s’ expects a matching ‘char *’ argument [-Wformat=]
         printf("illegal kind of identifier %s in expression\n");
                                            ~^
print.c: In function ‘print_node’:
print.c:36:18: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 3 has type ‘struct s_type *’ [-Wformat=]
     printf("%s (%x,%d)\n", node_name[node->name], node->type, node->value);
                 ~^                                ~~~~~~~~~~
print.c: In function ‘prt_program’:
print.c:58:23: warning: passing argument 1 of ‘prt_A_ID_LIST’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_A_ID_LIST(node->clink, s + 1);
                       ^~~~
print.c:23:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_A_ID_LIST(A_ID *, int);
      ^~~~~~~~~~~~~
print.c: In function ‘prt_expression’:
print.c:90:23: warning: passing argument 1 of ‘prt_A_ID_NAME’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_A_ID_NAME(node->clink, s + 1);
                       ^~~~
print.c:25:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_A_ID_NAME(A_ID *, int);
      ^~~~~~~~~~~~~
print.c:93:21: warning: passing argument 1 of ‘prt_integer’ makes integer from pointer without a cast [-Wint-conversion]
         prt_integer(node->clink, s + 1);
                     ^~~~
print.c:27:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_integer(int, int);
      ^~~~~~~~~~~
print.c:96:20: warning: passing argument 1 of ‘prt_STRING’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_STRING(node->clink, s + 1);
                    ^~~~
print.c:26:6: note: expected ‘char *’ but argument is of type ‘struct s_node *’
 void prt_STRING(char *, int);
      ^~~~~~~~~~
print.c:99:21: warning: passing argument 1 of ‘prt_integer’ makes integer from pointer without a cast [-Wint-conversion]
         prt_integer(node->clink, s + 1);
                     ^~~~
print.c:27:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_integer(int, int);
      ^~~~~~~~~~~
print.c:102:20: warning: passing argument 1 of ‘prt_STRING’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_STRING(node->clink, s + 1);
                    ^~~~
print.c:26:6: note: expected ‘char *’ but argument is of type ‘struct s_node *’
 void prt_STRING(char *, int);
      ^~~~~~~~~~
print.c:115:20: warning: passing argument 1 of ‘prt_STRING’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_STRING(node->rlink, s + 1);
                    ^~~~
print.c:26:6: note: expected ‘char *’ but argument is of type ‘struct s_node *’
 void prt_STRING(char *, int);
      ^~~~~~~~~~
print.c:130:20: warning: passing argument 1 of ‘prt_A_TYPE’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_A_TYPE(node->clink, s + 1);
                    ^~~~
print.c:22:6: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘struct s_node *’
 void prt_A_TYPE(A_TYPE *, int);
      ^~~~~~~~~~
print.c:133:20: warning: passing argument 1 of ‘prt_A_TYPE’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_A_TYPE(node->llink, s + 1);
                    ^~~~
print.c:22:6: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘struct s_node *’
 void prt_A_TYPE(A_TYPE *, int);
      ^~~~~~~~~~
print.c: In function ‘prt_statement’:
print.c:188:27: warning: passing argument 1 of ‘prt_A_ID_LIST’ from incompatible pointer type [-Wincompatible-pointer-types]
             prt_A_ID_LIST(node->llink, s + 1);
                           ^~~~
print.c:23:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_A_ID_LIST(A_ID *, int);
      ^~~~~~~~~~~~~
print.c: In function ‘prt_A_TYPE’:
print.c:290:24: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘A_TYPE * {aka struct s_type *}’ [-Wformat=]
         printf("(DONE:%x)\n", t);
                       ~^
print.c: In function ‘prt_A_ID_NAME’:
print.c:369:31: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 3 has type ‘A_TYPE * {aka struct s_type *}’ [-Wformat=]
     printf("(ID=\"%s\") TYPE:%x KIND:%s SPEC=%s LEV=%d VAL=%d ADDR=%d \n", id->name, id->type, id_kind_name[id->kind], spec_name[id->specifier], id->level, id->value, id->address);
                              ~^                                                      ~~~~~~~~
print.c: In function ‘prt_A_ID’:
print.c:375:31: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 3 has type ‘A_TYPE * {aka struct s_type *}’ [-Wformat=]
     printf("(ID=\"%s\") TYPE:%x KIND:%s SPEC=%s LEV=%d VAL=%d ADDR=%d \n", id->name, id->type, id_kind_name[id->kind], spec_name[id->specifier], id->level, id->value, id->address);
                              ~^                                                      ~~~~~~~~
print_sem.c:23:1: warning: data definition has no type or storage class
 print_space(int);
 ^~~~~~~~~~~
print_sem.c:23:1: warning: type defaults to ‘int’ in declaration of ‘print_space’ [-Wimplicit-int]
print_sem.c:24:1: warning: data definition has no type or storage class
 print_node(A_NODE *, int);
 ^~~~~~~~~~
print_sem.c:24:1: warning: type defaults to ‘int’ in declaration of ‘print_node’ [-Wimplicit-int]
print_sem.c: In function ‘print_sem_ast’:
print_sem.c:27:5: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
     printf("======= semantic tree ==========\n");
     ^~~~~~
print_sem.c:27:5: warning: incompatible implicit declaration of built-in function ‘printf’
print_sem.c:27:5: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_program’:
print_sem.c:37:27: warning: passing argument 1 of ‘prt_sem_A_ID_LIST’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_sem_A_ID_LIST(node->clink, s + 1);
                           ^~~~
print_sem.c:16:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_sem_A_ID_LIST(A_ID *, int);
      ^~~~~~~~~~~~~~~~~
print_sem.c:40:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("****semantic tree error******");
         ^~~~~~
print_sem.c:40:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_initializer’:
print_sem.c:59:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("****syntax tree error******");
         ^~~~~~
print_sem.c:59:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_expression’:
print_sem.c:69:27: warning: passing argument 1 of ‘prt_sem_A_ID_NAME’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_sem_A_ID_NAME(node->clink, s + 1);
                           ^~~~
print_sem.c:18:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_sem_A_ID_NAME(A_ID *, int);
      ^~~~~~~~~~~~~~~~~
print_sem.c:72:25: warning: passing argument 1 of ‘prt_sem_integer’ makes integer from pointer without a cast [-Wint-conversion]
         prt_sem_integer(node->clink, s + 1);
                         ^~~~
print_sem.c:20:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_sem_integer(int, int);
      ^~~~~~~~~~~~~~~
print_sem.c:75:25: warning: passing argument 1 of ‘prt_sem_LITERAL’ makes integer from pointer without a cast [-Wint-conversion]
         prt_sem_LITERAL(node->clink, s + 1);
                         ^~~~
print_sem.c:19:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_sem_LITERAL(int, int);
      ^~~~~~~~~~~~~~~
print_sem.c:78:25: warning: passing argument 1 of ‘prt_sem_integer’ makes integer from pointer without a cast [-Wint-conversion]
         prt_sem_integer(node->clink, s + 1);
                         ^~~~
print_sem.c:20:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_sem_integer(int, int);
      ^~~~~~~~~~~~~~~
print_sem.c:81:25: warning: passing argument 1 of ‘prt_sem_LITERAL’ makes integer from pointer without a cast [-Wint-conversion]
         prt_sem_LITERAL(node->clink, s + 1);
                         ^~~~
print_sem.c:19:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_sem_LITERAL(int, int);
      ^~~~~~~~~~~~~~~
print_sem.c:93:27: warning: passing argument 1 of ‘prt_sem_A_ID_NAME’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_sem_A_ID_NAME(node->rlink, s + 1);
                           ^~~~
print_sem.c:18:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_sem_A_ID_NAME(A_ID *, int);
      ^~~~~~~~~~~~~~~~~
print_sem.c:97:27: warning: passing argument 1 of ‘prt_sem_A_ID_NAME’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_sem_A_ID_NAME(node->rlink, s + 1);
                           ^~~~
print_sem.c:18:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_sem_A_ID_NAME(A_ID *, int);
      ^~~~~~~~~~~~~~~~~
print_sem.c:112:25: warning: passing argument 1 of ‘prt_sem_integer’ makes integer from pointer without a cast [-Wint-conversion]
         prt_sem_integer(node->clink, s + 1);
                         ^~~~
print_sem.c:20:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_sem_integer(int, int);
      ^~~~~~~~~~~~~~~
print_sem.c:115:24: warning: passing argument 1 of ‘prt_sem_A_TYPE’ from incompatible pointer type [-Wincompatible-pointer-types]
         prt_sem_A_TYPE(node->llink, s + 1);
                        ^~~~
print_sem.c:15:6: note: expected ‘A_TYPE * {aka struct s_type *}’ but argument is of type ‘struct s_node *’
 void prt_sem_A_TYPE(A_TYPE *, int);
      ^~~~~~~~~~~~~~
print_sem.c:136:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("****syntax tree error******");
         ^~~~~~
print_sem.c:136:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_arg_expr_list’:
print_sem.c:152:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("****syntax tree error******");
         ^~~~~~
print_sem.c:152:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_statement’:
print_sem.c:162:25: warning: passing argument 1 of ‘prt_sem_integer’ makes integer from pointer without a cast [-Wint-conversion]
         prt_sem_integer(node->llink, s + 1);
                         ^~~~
print_sem.c:20:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_sem_integer(int, int);
      ^~~~~~~~~~~~~~~
print_sem.c:170:31: warning: passing argument 1 of ‘prt_sem_A_ID_LIST’ from incompatible pointer type [-Wincompatible-pointer-types]
             prt_sem_A_ID_LIST(node->llink, s + 1);
                               ^~~~
print_sem.c:16:6: note: expected ‘A_ID * {aka struct s_id *}’ but argument is of type ‘struct s_node *’
 void prt_sem_A_ID_LIST(A_ID *, int);
      ^~~~~~~~~~~~~~~~~
print_sem.c:212:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("****syntax tree error******");
         ^~~~~~
print_sem.c:212:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_statement_list’:
print_sem.c:228:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("****syntax tree error******");
         ^~~~~~
print_sem.c:228:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_for_expression’:
print_sem.c:246:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("****syntax tree error******");
         ^~~~~~
print_sem.c:246:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_integer’:
print_sem.c:253:5: warning: incompatible implicit declaration of built-in function ‘printf’
     printf("INT=%d\n", a);
     ^~~~~~
print_sem.c:253:5: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_LITERAL’:
print_sem.c:259:5: warning: incompatible implicit declaration of built-in function ‘printf’
     printf("LITERAL: ");
     ^~~~~~
print_sem.c:259:5: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c: In function ‘prt_sem_A_TYPE’:
print_sem.c:272:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("(int)\n");
         ^~~~~~
print_sem.c:272:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:274:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("(float)\n");
         ^~~~~~
print_sem.c:274:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:276:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("(char %d)\n", t->size);
         ^~~~~~
print_sem.c:276:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:278:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("(void)\n");
         ^~~~~~
print_sem.c:278:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:280:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("(null)\n");
         ^~~~~~
print_sem.c:280:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:282:9: warning: incompatible implicit declaration of built-in function ‘printf’
         printf("(DONE:%x)\n", t);
         ^~~~~~
print_sem.c:282:9: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:282:24: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘A_TYPE * {aka struct s_type *}’ [-Wformat=]
         printf("(DONE:%x)\n", t);
                       ~^
print_sem.c:288:13: warning: incompatible implicit declaration of built-in function ‘printf’
             printf("ENUM\n");
             ^~~~~~
print_sem.c:288:13: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:305:29: warning: passing argument 1 of ‘prt_sem_integer’ makes integer from pointer without a cast [-Wint-conversion]
             prt_sem_integer(t->expr, s + 2);
                             ^
print_sem.c:250:6: note: expected ‘int’ but argument is of type ‘struct s_node *’
 void prt_sem_integer(int a, int s)
      ^~~~~~~~~~~~~~~
print_sem.c: In function ‘prt_sem_A_ID_NAME’:
print_sem.c:354:5: warning: incompatible implicit declaration of built-in function ‘printf’
     printf("(ID=\"%s\") TYPE:%x KIND:%s SPEC=%s LEV=%d VAL=%d ADDR=%d \n",
     ^~~~~~
print_sem.c:354:5: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:354:31: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 3 has type ‘A_TYPE * {aka struct s_type *}’ [-Wformat=]
     printf("(ID=\"%s\") TYPE:%x KIND:%s SPEC=%s LEV=%d VAL=%d ADDR=%d \n",
                              ~^
            id->name, id->type, id_kind_name[id->kind], spec_name[id->specifier], id->level, id->value, id->address);
                      ~~~~~~~~  
print_sem.c: In function ‘prt_sem_A_ID’:
print_sem.c:361:5: warning: incompatible implicit declaration of built-in function ‘printf’
     printf("(ID=\"%s\") TYPE:%x KIND:%s SPEC=%s LEV=%d VAL=%d ADDR=%d \n",
     ^~~~~~
print_sem.c:361:5: note: include ‘<stdio.h>’ or provide a declaration of ‘printf’
print_sem.c:361:31: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 3 has type ‘A_TYPE * {aka struct s_type *}’ [-Wformat=]
     printf("(ID=\"%s\") TYPE:%x KIND:%s SPEC=%s LEV=%d VAL=%d ADDR=%d \n",
                              ~^
            id->name, id->type, id_kind_name[id->kind], spec_name[id->specifier], id->level, id->value, id->address);
                      ~~~~~~~~  
print_sem.c:376:33: warning: passing argument 1 of ‘prt_sem_integer’ makes integer from pointer without a cast [-Wint-conversion]
                 prt_sem_integer(id->init, s + 2);
                                 ^~
print_sem.c:250:6: note: expected ‘int’ but argument is of type ‘A_NODE * {aka struct s_node *}’
 void prt_sem_integer(int a, int s)
      ^~~~~~~~~~~~~~~
